#!/usr/bin/env node

var fs = require("fs"),
    os = require("os"),
    path = require("path"),
    child = require("child_process"),
    readline = require("readline"),
    https = require("https");

var queue = require("queue-async");

var argv = require("optimist").usage("Usage: \033[1mgistup\033[0m [options] -- [file …]" + os.EOL + os.EOL

+ "Version: " + require("../package.json").version + os.EOL + os.EOL

+ "Uploads the specified files to create a new Gist. If no files are specified," + os.EOL
+ "all files in the current directory are uploaded.")
    .options("public", {
      default: true,
      describe: "true for a public gist; false for a secret one"
    })
    .options("private", {
      default: false,
      describe: "alias for --no-public"
    })
    .options("description", {
      alias: "m",
      default: "",
      describe: "an optional description for your gist"
    })
    .options("interactive", {
      alias: "i",
      default: false,
      describe: "request confirmation of every file before adding"
    })
    .options("open", {
      default: "https://gist.github.com/",
      describe: "URL to open in your web browser after creating gist"
    })
    .options("remote", {
      default: "origin",
      describe: "name of the git remote"
    })
    .options("version", {
      default: false,
      describe: "print the current version of gistup"
    })
    .options("help", {
      alias: "h",
      describe: "display this useful message"
    })
    .check(function(argv) {
      if (argv.help) throw "";
      if (argv.private) argv.public = false;
      if (argv.version) console.log(require("../package.json").version), process.exit(0);
    })
    .argv;

queue(1)
    .defer(getSettings)
    .defer(gitInit)
    .defer(gitRemoteDoesNotExist)
    .defer(gitListUntrackedFiles)
    .await(function(error, settings, _, _, files) {
      unless(error)
          .defer(confirmFiles, files)
          .defer(gitAdd, files)
          .defer(gitCommit)
          .defer(createGist, settings.token)
          .await(function(error, _, _, _, id) {
            unless(error)
                .defer(gitRemoteAdd, id)
                .defer(gitPush)
                .defer(openBrowser, id)
                .await(unless);
          });
    });

function unless(error) {
  if (error) {
    if (error.type === UserError) {
      console.warn(os.EOL + "\033[91mERROR:\033[0m " + error.message);
      process.exit(1);
    }
    throw error;
  }
  return queue(1);
}

function getSettings(callback) {
  var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE,
      settingsPath = path.join(home, ".gistup.json"),
      settings;

  try {
    settings = JSON.parse(fs.readFileSync(settingsPath, "utf8"));
  } catch (error) {

    console.log("Welcome to GISTUP!");
    console.log("");
    console.log("Since this is your first time using gistup, we need to create a");
    console.log("GitHub \033[93mpersonal access token\033[0m to grant gistup permission to create");
    console.log("gists on your behalf. You’ll only have to do this once, and you");
    console.log("can easily revoke this token in the future if desired.");
    console.log("");
    console.log("When you press any key to continue, your web browser will open.");
    console.log("Please login (if needed) and fill out the resulting form to create");
    console.log("an access token. When you’re done, copy the access token to the");
    console.log("clipboard and paste it back into the terminal.");
    console.log("");
    process.stdout.write("Press any key to open GitHub… ");

    process.stdin.setRawMode(true);
    process.stdin.resume();
    process.stdin.once("data", function() {
      child.exec("open 'https://github.com/settings/tokens/new'", function(error) {
        if (error) {
          argv.open = false;
          console.log("");
          console.log("Oops, unable to open your web browser! Please visit this URL:");
          console.log("");
          console.log("https://github.com/settings/tokens/new");
          console.log("");
        }

        var readin = readline.createInterface({
          input: process.stdin,
          output: process.stdout
        });

        readin.question("Enter personal access token: ", function(token) {
          readin.close();
          token = token.trim().toLowerCase();
          if (!/^[0-9a-f]{40}$/.test(token)) return void callback(new UserError("The access token \"" + token + "\" is invalid." + os.EOL + os.EOL + "Did you copy and paste the access token correctly? It should be a" + os.EOL + "forty-character hexadecimal string. Please fix and try again."));
          settings = {token: token};
          fs.writeFile(settingsPath, JSON.stringify(settings, null, 2), {mode: parseInt("0600", 8)}, function(error) {
            callback(error, error ? null : settings);
          });
        });
      });
    });

    return;
  }

  callback(null, settings);
}

function gitInit(callback) {
  child.exec("git init", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git init failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitRemoteDoesNotExist(callback) {
  child.exec("git config --get remote." + quote(argv.remote) + ".url || true", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git config failed.");
    if (!error && stdout) error = new UserError("the remote \"" + argv.remote + "\" already exists." + os.EOL + os.EOL + "Are you trying to run gistup in a directory that already has a git" + os.EOL + "repository? This would overwrite your existing remote, which points to:" + os.EOL + os.EOL + "  " + stdout + os.EOL + "If you’ve previously run gistup in this directory and you want to update" + os.EOL + "your gist, just push to the existing git remote:" + os.EOL + os.EOL + "  git push" + os.EOL + os.EOL + "Or, if you don’t need this remote anymore, remove it and gistup will" + os.EOL + "replace it with a new one the next time you run it:" + os.EOL + os.EOL + "  git remote rm " + argv.remote + os.EOL + os.EOL + "Lastly, you can also specify a different remote name for gistup, so that" + os.EOL + "you can push to multiple git remotes:" + os.EOL + os.EOL + "  gistup --origin=gist" + os.EOL + os.EOL + "Please fix and try again.");
    callback(error);
  });
}

function gitListUntrackedFiles(callback) {
  if (argv._.length) return void callback(null, argv._);
  child.exec("git ls-files --others --exclude-standard --directory -x '*/'", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git ls-files failed.");
    callback(error, error ? null : stdout.trim().split(os.EOL));
  });
}

function confirmFiles(files, callback) {
  if (!argv.interactive) return void callback(null);
  var readin = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  var q = queue(1);

  files.forEach(function(file, index) {
    q.defer(confirmFile, file, index);
  });

  q.awaitAll(function(error) {
    readin.close();
    callback(error);
  });

  function confirmFile(file, index, callback) {
    readin.question("add " + file + "? ", function(answer) {
      if (/^y|yes$/i.test(answer)) return void callback(null);
      if (/^n|no$/i.test(answer)) return files.splice(index, 1), void callback(null);
      confirmFile(file, index, callback);
    });
  }
}

function gitAdd(files, callback) {
  if (!files.length) return void callback(null);
  child.exec("git add " + files.map(quote).join(" "), function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git add failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitCommit(callback) {
  child.exec("git commit --allow-empty -m 'Initial gistup commit.'", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git commit failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function createGist(token, callback) {
  var json = escape(JSON.stringify({
    "description": argv.description,
    "public": argv.public,
    "files": {
      ".gistup": {
        "content": "gistup"
      }
    }
  }));

  var request = https.request({
    hostname: "api.github.com",
    port: 443,
    path: "/gists",
    method: "POST",
    headers: {
      "Accept": "application/vnd.github.v3+json",
      "Authorization": "token " + token,
      "User-Agent": "mbostock/gistup",
      "Content-Type": "application/json;charset=utf8",
      "Content-Length": json.length
    }
  }, function(response) {
    var chunks = [];
    response.setEncoding("utf8");
    response.on("data", function(chunk) { chunks.push(chunk); });
    response.on("end", function() {
      var response, id = null, error;
      try { response = JSON.parse(chunks.join("")); }
      catch (e) { error = e; }
      if (!error && !response) error = new Error("empty API response");
      if (!error && !/^[0-9a-f]+$/i.test(id = response.id)) error = new Error("invalid gist id: " + id); // for safety
      if (!error) console.log("gist " + id + " created!");
      else console.warn(os.EOL + chunks.join(""));
      callback(error, id);
    });
  });

  request.on("error", callback);
  request.write(json);
  request.end();
}

function gitRemoteAdd(id, callback) {
  child.exec("git remote add --track master " + quote(argv.remote) + " git@gist.github.com:" + id + ".git", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr), error = new Error("git remote failed.");
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function gitPush(callback) {
  child.exec("git push -fu " + quote(argv.remote) + " master", function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr); // ignore warnings
    if (!error && stdout) process.stdout.write(stdout);
    callback(error);
  });
}

function openBrowser(id, callback) {
  if (!argv.open) return void callback(null);
  child.exec("open " + quote(argv.open) + id, function(error, stdout, stderr) {
    if (!error && stderr) process.stderr.write(stderr); // ignore errors
    callback(null);
  });
}

function escape(description) {
  return description;
  return description.replace(/[\u007f-\uffff]/g, function(c) {
    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
  });
}

function quote(name) {
  return '"' + name.replace(/(["\s'$`\\])/g, "\\$1") + '"';
}

function UserError(message) {
  var error = new Error(message);
  error.type = UserError;
  return error;
}
